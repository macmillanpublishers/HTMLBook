<?xml version="1.0" encoding="UTF-8"?>

<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
               xmlns:functx="http://www.functx.com"
	       xmlns="http://www.w3.org/1999/xhtml"
	       xmlns:ncx="http://www.daisy.org/z3986/2005/ncx/"
	       xmlns:h="http://www.w3.org/1999/xhtml"
	       xmlns:e="http://github.com/oreillymedia/epubrenderer"
               stylesheet="../htmlbook.xsl">

  <x:param name="autogenerate-toc" select="0"/>
  <x:param name="toc-placeholder-overwrite-contents" select="0"/>

  <x:scenario label="When *empty* TOC nav element is matched">
    <x:context select="(//h:nav)[1]">
      <body>
	<nav data-type="toc"/>
	<section id="chapter" data-type="chapter">
	  <h1>This chapter head should be in TOC</h1>
	  <p>Go TOC!</p>
	</section>
      </body>
    </x:context>
   
    <x:scenario label="And autogenerate-toc param is *disabled*">
      <x:context>
	<x:param name="autogenerate-toc" select="0"/>
      </x:context>
      <x:expect label="TOC content *should not* be generated (nav should stay empty)">
	<nav data-type="toc" id="..."/>
      </x:expect>
    </x:scenario>
 
    <x:scenario label="And autogenerate-toc param is *enabled*">
      <x:context>
	<x:param name="autogenerate-toc" select="1"/>
      </x:context>
      <x:expect label="TOC content should be generated"
		test="count(h:nav[.//h:li[contains(., 'This chapter head should be in TOC')]]) = 1"/>
    </x:scenario>
   
  </x:scenario>
  
  <x:scenario label="When *nonempty* TOC nav element is matched">
    <x:context select="(//h:nav)[1]">
      <body>
	<nav data-type="toc">
	  <h1>Manual TOC</h1>
	  <ol>
	    <li>Entry 1</li>
	    <li>Entry 2</li>
	    <li>Entry 3</li>
	  </ol>
	</nav>
	<section data-type="chapter">
	  <h1>This chapter head should be in TOC</h1>
	  <p>Go TOC!</p>
	</section>
      </body>
    </x:context>
    
    <x:scenario label="And autogenerate-toc param is *disabled*">
      <x:context>
	<x:param name="autogenerate-toc" select="0"/>
      </x:context>
      <!-- Same as in context above, plus autogenerated id -->
      <x:expect label="TOC content *should not* be generated (nav content left as is)">
	<nav id="..." data-type="toc">
	  <h1>Manual TOC</h1>
	  <ol>
	    <li>Entry 1</li>
	    <li>Entry 2</li>
	    <li>Entry 3</li>
	  </ol>
	</nav>
      </x:expect>
    </x:scenario>
    
    <x:scenario label="And autogenerate-toc param is *enabled*, but toc-placeholder-overwrite-contents is *disabled*">
      <x:context>
	<x:param name="autogenerate-toc" select="1"/>
	<x:param name="toc-placeholder-overwrite-contents" select="0"/>
      </x:context>
      <!-- Same as in context above, plus autogenerated id -->
      <x:expect label="TOC content *should not* be generated (nav content left as is)">
	<nav id="..." data-type="toc">
	  <h1>Manual TOC</h1>
	  <ol>
	    <li>Entry 1</li>
	    <li>Entry 2</li>
	    <li>Entry 3</li>
	  </ol>
	</nav>
      </x:expect>
    </x:scenario>

    <x:scenario label="And autogenerate-toc param is *enabled*, and toc-placeholder-overwrite-contents is *enabled*">
      <x:context>
	<x:param name="autogenerate-toc" select="1"/>
	<x:param name="toc-placeholder-overwrite-contents" select="1"/>
      </x:context>
      <x:expect label="TOC content *should* be generated (nav content overwritten)"
		test="count(h:nav[.//h:li[contains(., 'This chapter head should be in TOC')]]) = 1 and
		      not(exists(h:nav//h:h1[contains(., 'Manual TOC')]))"/>
    </x:scenario>
  </x:scenario>
    
  <x:scenario label="When there are multiple empty TOC nav elements">
    <x:context select="//h:nav">
      <body>
	<nav data-type="toc"/>
	<nav data-type="toc"/>
      </body>
      <section data-type="chapter">
	<h1>This chapter head should be in TOC</h1>
	<p>Go TOC!</p>
      </section>
      <x:param name="autogenerate-toc" select="1"/>
    </x:context>
    <x:expect label="Process them all the same way"
	      test="deep-equal(//h:nav[@data-type='toc'][1]/node(), //h:nav[@data-type='toc'][2]/node())"/>
  </x:scenario>

  <x:scenario label="When a TOC is generated with a scope specified">
    <x:context href="skeleton.html" select="(//h:nav[@data-type='toc'])[1]">
      <x:param name="autogenerate-toc" select="1"/>
      <x:param name="scope" select="(document('../skeleton.html')//h:section[@data-type='sect1'])[1]"/>
    </x:context>
    <x:expect label="Root of TOC list should be the scope root">
      <nav data-type="toc" id="...">
	<ol>
	  <li data-type="sect1">...</li>
	</ol>
      </nav>
    </x:expect>
  </x:scenario>
  
  <x:scenario label="When a standard book-level section (chapter) is matched in tocgen mode">
    <x:context href="skeleton.html" select="(//h:section[@data-type='chapter'])[1]" mode="tocgen"/>
    <x:expect label="An entry 'li' should be generated">
      <li data-type="chapter"><a href="...">...</a>...</li>
    </x:expect>
  </x:scenario>

  <x:scenario label="When a standard book-level section (chapter) with class of 'notoc' is matched in tocgen mode">
    <x:context select="(//h:section[@data-type='chapter'][@class='notoc'])[1]" mode="tocgen">
      <body data-type="book">
	<section data-type="chapter">
	  <h1>First chapter</h1>
	  <p>Number 1!</p>
	</section>
	<section data-type="chapter" class="notoc">
	  <h1>Second chapter</h1>
	  <p>Number 2!</p>
	</section>
	<section data-type="chapter">
	  <h1>Third chapter</h1>
	  <p>Number 3!</p>
	</section>
      </body>
    </x:context>
    <x:expect label="An entry 'li' *should not* be generated" select="()"/>
  </x:scenario>

  <x:scenario label="When a standard book-level section (part) is matched in tocgen mode">
    <x:context href="skeleton.html" select="(//h:div[@data-type='part'])[1]" mode="tocgen"/>
    <x:expect label="An entry 'li' should be generated">
      <li data-type="part"><a href="...">...</a>...</li>
    </x:expect>
  </x:scenario>
  
 <x:scenario label="When a subsection within the toc.section.depth is matched in tocgen mode">
    <x:context href="skeleton.html" select="(//h:section[@data-type='sect1'])[1]" mode="tocgen">
      <x:param name="toc.section.depth" select="1"/>
    </x:context>
    <x:expect label="An entry 'li' should be generated">
      <li data-type="sect1"><a href="...">...</a></li>
    </x:expect>
  </x:scenario>

  <x:scenario label="When a subsection at greater depth than the toc.section.depth is matched in tocgen mode">
    <x:context href="skeleton.html" select="(//h:section[@data-type='sect2'])[1]" mode="tocgen">
      <x:param name="toc.section.depth" select="1"/>
    </x:context>
    <x:expect label="An entry 'li' *should not* be generated" select="()"/>
  </x:scenario>

  <x:scenario label="When a subsection with class of 'notoc' is matched in tocgen mode">
    <x:context select="(//h:section[@data-type='sect2'][@class='notoc'])[1]" mode="tocgen">
      <x:param name="toc.section.depth" select="3"/>
      <body data-type="book">
	<section data-type="chapter">
	  <h1>First chapter</h1>
	  <section data-type="sect1">
	    <h1>First sect1</h1>
	    <section data-type="sect2">
	      <h2>First sect2</h2>
	      <p>Hello world</p>
	    </section>
	    <section data-type="sect2" class="notoc">
	      <h2>Second sect2</h2>
	      <p>Should not have entry in TOC</p>
	    </section>
	  </section>
	  <section data-type="sect1">
	    <h1>Second sect1</h1>
	    <p>Whatever...</p>
	  </section>
	</section>
	<section data-type="chapter">
	  <h1>Second chapter</h1>
	  <p>Another chapter</p>
	</section>
      </body>
    </x:context>
    <x:expect label="An entry 'li' *should not* be generated" select="()"/>
  </x:scenario>
  
  <x:scenario label="When a frontmatter or backmatter section is matched in tocgen mode">
    <x:context select="(//h:section[@data-type='colophon'])[1]" mode="tocgen">>
      <x:param name="toc.section.depth" select="3"/>
      <body data-type="book">
        <section data-type="chapter">
          <h1>First chapter</h1>
          <section data-type="sect1">
            <h1>First sect1</h1>
            <p>A paragraph</p>
          </section>
        </section>
        <section data-type="chapter">
          <h1>Second chapter</h1>
          <p>A paragraph</p>
        </section>
        <section data-type="colophon">
          <h1>About the Author</h1>
          <p>There shouldn't be an entry for this in the TOC</p>
        </section>
      </body>
    </x:context>
    <x:expect label="An entry 'li' *should not* be generated" select="()"/>
  </x:scenario>
  
  <x:scenario label="When a subsection of a frontmatter or backmatter section is matched in tocgen mode">
    <x:context select="(//h:section[@data-type='colophon'])[1]" mode="tocgen">>
      <x:param name="toc.section.depth" select="3"/>
      <body data-type="book">
        <section data-type="chapter">
          <h1>First chapter</h1>
          <section data-type="sect1">
            <h1>First sect1</h1>
            <p>A paragraph</p>
          </section>
        </section>
        <section data-type="chapter">
          <h1>Second chapter</h1>
          <p>A paragraph</p>
        </section>
        <section data-type="colophon">
          <h1>About the Author</h1>
          <p>Bio goes here</p>
          <section data-type="sect1">
            <h1>Acknowledgments</h1>
            <p>There shouldn't be an entry for this in the TOC</p>
          </section>
        </section>
      </body>
    </x:context>
    <x:expect label="An entry 'li' *should not* be generated" select="()"/>
  </x:scenario>
  
  <x:scenario label="When a nonsection is matched in tocgen mode">
    <x:context href="skeleton.html" select="(//h:p)[1]" mode="tocgen"/>
    <x:expect label="An entry 'li' *should not* be generated" select="()"/>
  </x:scenario>

  <!-- Inline markup in TOC tests -->
  <x:scenario label="When a section with inline markup in its heading is matched in tocgen mode">
    <x:context select="(//h:section[@data-type='sect1'])[1]" mode="tocgen">>
      <x:param name="toc.section.depth" select="3"/>
      <body data-type="book">
        <section data-type="chapter">
          <h1>First chapter</h1>
          <section data-type="sect1">
            <h1>First sect1 with <em>inline tagging</em></h1>
            <p>A paragraph</p>
          </section>
        </section>
      </body>
    </x:context>
    
    <x:scenario label="And inline.markup.in.toc disabled">
      <x:context>
	<x:param name="inline.markup.in.toc" select="0"/>
      </x:context>

      <x:expect label="An entry 'li' should be generated *without* inline markup">
	<li data-type="sect1"><a href="...">First sect1 with inline tagging</a></li>
      </x:expect>
    </x:scenario>
    
    <x:scenario label="And inline.markup.in.toc enabled">
      <x:context>
	<x:param name="inline.markup.in.toc" select="1"/>
      </x:context>

      <x:expect label="An entry 'li' should be generated *with* inline markup">
	<li data-type="sect1"><a href="...">First sect1 with <em>inline tagging</em></a></li>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <x:scenario label="When toc-title is called for English-language content (default)">
    <x:call template="toc-title"/>
    <x:expect label="it should return the proper TOC title">Table of Contents</x:expect>
  </x:scenario>

  <x:pending>
    <x:scenario label="When toc-title is called for non-English-language content">
      <!-- For this test, would need to further parameterize get-localization-value so that you could grab a different localization for the test -->
      <x:call template="toc-title"/>
      <x:expect label="it should return the proper TOC title"/>
    </x:scenario>
  </x:pending>
</x:description>
